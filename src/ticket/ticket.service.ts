// src/tickets/tickets.service.ts
import {
  Injectable,
  NotFoundException,
  ForbiddenException,
  BadRequestException,
} from '@nestjs/common';
import { AssignTicketDto } from './dto/assign-ticket.dto';
import { PrismaService } from 'src/prisma.service';
import { Role, TicketStatus } from '@prisma/client';
import { CreateTicketDto } from './decorators/ticket-decorator';
import { AddCommentDto } from './dto/add-comment.dto';

@Injectable()
export class TicketsService {
  constructor(private prisma: PrismaService) {}
  async createTicket(createTicketDto: CreateTicketDto, creatorId: string) {
    return this.prisma.ticket.create({
      data: {
        title: createTicketDto.title,
        description: createTicketDto.description,
        customerName: createTicketDto.customerName,
        status: createTicketDto.status ?? TicketStatus.OPEN,
        createdById: creatorId,
        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ + —Å—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
        assignments: {
          create: {
            assignedToId: creatorId,
            assignedById: creatorId, // –µ—Å–ª–∏ —Å–∞–º —Å–µ–±—è –Ω–∞–∑–Ω–∞—á–∏–ª
          },
        },
      },
      include: {
        createdBy: {
          select: {
            id: true,
            email: true,
            role: true,
          },
        },
        assignments: {
          select: {
            id: true,
            assignedTo: {
              select: {
                id: true,
                email: true,
                role: true,
              },
            },
            assignedBy: {
              select: {
                id: true,
                email: true,
                role: true,
              },
            },
            createdAt: true,
          },
        },
      },
    });
  }
  async getTickets(userId: string, userRole: Role) {
    if (userRole === Role.SUPERVISOR) {
      // –°—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä –≤–∏–¥–∏—Ç –≤—Å–µ —Ç–∏–∫–µ—Ç—ã –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
      return this.prisma.ticket.findMany({
        orderBy: { createdAt: 'desc' },
        select: {
          id: true,
          title: true,
          status: true,
          customerName: true,
          createdAt: true,
        },
      });
    } else {
      // –û–ø–µ—Ä–∞—Ç–æ—Ä –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Ç–∏–∫–µ—Ç—ã (—Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–º –∏–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ)
      return this.prisma.ticket.findMany({
        where: {
          OR: [
            { createdById: userId },
            {
              assignments: {
                some: {
                  assignedToId: userId,
                },
              },
            },
          ],
        },
        orderBy: { createdAt: 'desc' },
        select: {
          id: true,
          title: true,
          status: true,
          customerName: true,
          createdAt: true,
          // –ú–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –µ—Å–ª–∏ –Ω–∞–¥–æ
        },
      });
    }
  }
  async getTicketById(ticketId: string, userId: string, userRole: Role) {
    const ticket = await this.prisma.ticket.findUnique({
      where: { id: ticketId },
      include: {
        createdBy: {
          select: {
            id: true,
            email: true,
            role: true,
          },
        },
        assignments: {
          orderBy: {
            createdAt: 'desc',
          },
          take: 1, // –ø–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
          select: {
            assignedTo: {
              select: {
                id: true,
                email: true,
                role: true,
              },
            },
          },
        },
        comments: {
          include: {
            user: {
              select: {
                id: true,
                email: true,
                role: true,
              },
            },
          },
          orderBy: {
            createdAt: 'asc',
          },
        },
      },
    });

    if (!ticket) {
      throw new NotFoundException('–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    if (userRole === Role.OPERATOR) {
      const isCreator = ticket.createdBy.id === userId;
      const isAssigned = ticket.assignments?.[0]?.assignedTo?.id === userId;

      if (!isCreator && !isAssigned) {
        throw new ForbiddenException('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∏–∫–µ—Ç–∞');
      }
    }

    return ticket;
  }

  //   async updateTicketStatus(
  //     id: number,
  //     updateStatusDto: UpdateTicketStatusDto,
  //     userId: number,
  //     userRole: UserRole,
  //   ) {
  //     const ticket = await this.getTicketById(id, userId, userRole);

  //     // –û–ø–µ—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏—Ö —Ç–∏–∫–µ—Ç–æ–≤
  //     if (userRole === UserRole.OPERATOR) {
  //       const hasAccess =
  //         ticket.assignedToId === userId || ticket.createdById === userId;
  //       if (!hasAccess) {
  //         throw new ForbiddenException('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞');
  //       }
  //     }

  //     return this.prisma.ticket.update({
  //       where: { id },
  //       data: updateStatusDto,
  //       include: {
  //         assignedTo: {
  //           select: {
  //             id: true,
  //             email: true,
  //             name: true,
  //             role: true,
  //           },
  //         },
  //         createdBy: {
  //           select: {
  //             id: true,
  //             email: true,
  //             name: true,
  //             role: true,
  //           },
  //         },
  //       },
  //     });
  //   }

  //   async assignTicket(id: number, assignTicketDto: AssignTicketDto) {
  //     const assignee = await this.prisma.user.findUnique({
  //       where: { id: assignTicketDto.assignedToId },
  //     });

  //     if (!assignee) {
  //       throw new NotFoundException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
  //     }

  //     const ticket = await this.prisma.ticket.findUnique({ where: { id } });
  //     if (!ticket) {
  //       throw new NotFoundException('–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
  //     }

  //     return this.prisma.ticket.update({
  //       where: { id },
  //       data: { assignedToId: assignTicketDto.assignedToId },
  //       include: {
  //         assignedTo: {
  //           select: {
  //             id: true,
  //             email: true,
  //             name: true,
  //             role: true,
  //           },
  //         },
  //         createdBy: {
  //           select: {
  //             id: true,
  //             email: true,
  //             name: true,
  //             role: true,
  //           },
  //         },
  //       },
  //     });
  //   }

  async addComment(
    ticketId: string,
    addCommentDto: AddCommentDto,
    userId: string,
  ) {
    // (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∏–∫–µ—Ç, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å)

    return this.prisma.comment.create({
      data: {
        message: addCommentDto.message, // –ø–æ–ª–µ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –º–æ–¥–µ–ª—å—é
        ticketId,
        userId,
      },
      include: {
        user: {
          select: {
            id: true,
            email: true,
            role: true,
          },
        },
      },
    });
  }

  // async getOperators() {
  //   return this.prisma.user.findMany({
  //     where: {
  //       role: Role.OPERATOR,
  //     },
  //     select: {
  //       id: true,
  //       email: true,
  //       role: true,
  //     },
  //   });
  // }
  async assign(ticketId: string, newOperatorId: string, supervisorId: string) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Ä–æ–ª—å –û–ø–µ—Ä–∞—Ç–æ—Ä
    const operator = await this.prisma.user.findUnique({
      where: { id: newOperatorId },
    });
    if (!operator || operator.role !== Role.OPERATOR) {
      throw new NotFoundException('–û–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–æ–ª—å');
    }
    return this.prisma.assignment.create({
      data: {
        ticketId,
        assignedToId: newOperatorId,
        assignedById: supervisorId,
      },
      include: {
        assignedTo: true,
        assignedBy: true,
        ticket: true,
      },
    });
  }
}
